{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/range.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","dummy/tests/unit/helpers/abs-test.js","dummy/tests/unit/helpers/acos-test.js","dummy/tests/unit/helpers/acosh-test.js","dummy/tests/unit/helpers/add-test.js","dummy/tests/unit/helpers/asin-test.js","dummy/tests/unit/helpers/asinh-test.js","dummy/tests/unit/helpers/atan-test.js","dummy/tests/unit/helpers/atan2-test.js","dummy/tests/unit/helpers/atanh-test.js","dummy/tests/unit/helpers/cbrt-test.js","dummy/tests/unit/helpers/ceil-test.js","dummy/tests/unit/helpers/clz32-test.js","dummy/tests/unit/helpers/cos-test.js","dummy/tests/unit/helpers/cosh-test.js","dummy/tests/unit/helpers/div-test.js","dummy/tests/unit/helpers/exp-test.js","dummy/tests/unit/helpers/expm1-test.js","dummy/tests/unit/helpers/floor-test.js","dummy/tests/unit/helpers/fround-test.js","dummy/tests/unit/helpers/hypot-test.js","dummy/tests/unit/helpers/imul-test.js","dummy/tests/unit/helpers/log-e-test.js","dummy/tests/unit/helpers/log10-test.js","dummy/tests/unit/helpers/log1p-test.js","dummy/tests/unit/helpers/log2-test.js","dummy/tests/unit/helpers/max-test.js","dummy/tests/unit/helpers/min-test.js","dummy/tests/unit/helpers/mod-test.js","dummy/tests/unit/helpers/mult-test.js","dummy/tests/unit/helpers/pow-test.js","dummy/tests/unit/helpers/random-test.js","dummy/tests/unit/helpers/round-test.js","dummy/tests/unit/helpers/sign-test.js","dummy/tests/unit/helpers/sin-test.js","dummy/tests/unit/helpers/sqrt-test.js","dummy/tests/unit/helpers/sub-test.js","dummy/tests/unit/helpers/tan-test.js","dummy/tests/unit/helpers/tanh-test.js","dummy/tests/unit/helpers/trunc-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  var run = _ember.default.run;\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = _ember.default.RSVP.resolve;\n});","define(\"dummy/tests/helpers/range\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (start, end) {\n    return Array.from({ length: end - start + 1 }, function (x, idx) {\n      return start + idx;\n    });\n  };\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'dummy/app', 'dummy/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var merge = Ember.merge;\n  var run = Ember.run;\n  function startApp(attrs) {\n    var attributes = merge({}, _environment.default.APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    return run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/range.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/range.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/abs-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/abs-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/acos-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/acos-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/acosh-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/acosh-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/asin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/asin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/asinh-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/asinh-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/atan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/atan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/atan2-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/atan2-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/atanh-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/atanh-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/cbrt-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/cbrt-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/ceil-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/ceil-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/clz32-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/clz32-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/cos-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/cos-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/cosh-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/cosh-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/div-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/div-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/exp-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/exp-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/expm1-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/expm1-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/floor-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/floor-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/fround-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/fround-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/hypot-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/hypot-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/imul-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/imul-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/log-e-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/log-e-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/log10-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/log10-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/log1p-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/log1p-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/log2-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/log2-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/max-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/max-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/min-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/min-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/mod-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/mod-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/mult-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/mult-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/pow-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/pow-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/random-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/random-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/round-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/round-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/sign-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/sign-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/sin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/sin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/sqrt-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/sqrt-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/sub-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/sub-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/tan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/tan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/tanh-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/tanh-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/trunc-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/trunc-test.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/unit/helpers/abs-test', ['dummy/helpers/abs', 'qunit'], function (_abs, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | abs');\n\n  (0, _qunit.test)('absolute value works', function (assert) {\n    var result = void 0;\n    result = (0, _abs.abs)([-1]);\n    assert.equal(result, 1);\n    result = (0, _abs.abs)([1]);\n    assert.equal(result, 1);\n  });\n\n  (0, _qunit.test)('absolute value of `null`, empty string, and empty array all equal 0', function (assert) {\n    var result = void 0;\n    result = (0, _abs.abs)([null]);\n    assert.equal(result, 0);\n    result = (0, _abs.abs)(['']);\n    assert.equal(result, 0);\n    result = (0, _abs.abs)([[]]);\n    assert.equal(result, 0);\n  });\n\n  (0, _qunit.test)('absolute value of empty object literal equals `NaN`', function (assert) {\n    var result = (0, _abs.abs)([{}]);\n    assert.ok(isNaN(result));\n  });\n});","define('dummy/tests/unit/helpers/acos-test', ['dummy/helpers/acos', 'qunit'], function (_acos, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | acos');\n\n  (0, _qunit.test)('acos works', function (assert) {\n    var result = (0, _acos.acos)([1]);\n    assert.equal(result, 0);\n  });\n});","define('dummy/tests/unit/helpers/acosh-test', ['dummy/helpers/acosh', 'qunit'], function (_acosh, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | acosh');\n\n  (0, _qunit.test)('acosh works', function (assert) {\n    var result = (0, _acosh.acosh)([1]);\n    assert.equal(result, 0);\n  });\n});","define('dummy/tests/unit/helpers/add-test', ['dummy/helpers/add', 'qunit'], function (_add, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | add');\n\n  (0, _qunit.test)('addition works', function (assert) {\n    var result = (0, _add.add)([20, 10]);\n    assert.equal(result, 30);\n  });\n\n  (0, _qunit.test)('addition of multiple arguments works', function (assert) {\n    var result = (0, _add.add)([1, 2, 3, 4, 5]);\n    assert.equal(result, 15);\n  });\n});","define('dummy/tests/unit/helpers/asin-test', ['dummy/helpers/asin', 'qunit'], function (_asin, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | asin');\n\n  (0, _qunit.test)('asin works', function (assert) {\n    var result = (0, _asin.asin)([0]);\n    assert.equal(result, 0);\n  });\n});","define('dummy/tests/unit/helpers/asinh-test', ['dummy/helpers/asinh', 'qunit'], function (_asinh, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | asinh');\n\n  (0, _qunit.test)('asinh works', function (assert) {\n    var result = (0, _asinh.asinh)([0]);\n    assert.equal(result, 0);\n  });\n});","define('dummy/tests/unit/helpers/atan-test', ['dummy/helpers/atan', 'qunit'], function (_atan, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | atan');\n\n  (0, _qunit.test)('atan works', function (assert) {\n    var result = (0, _atan.atan)([0]);\n    assert.equal(result, 0);\n  });\n});","define('dummy/tests/unit/helpers/atan2-test', ['dummy/helpers/atan2', 'qunit'], function (_atan, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | atan2');\n\n  (0, _qunit.test)('atan2 works', function (assert) {\n    var result = (0, _atan.atan2)([0, 1]);\n    assert.equal(result, 0);\n  });\n});","define('dummy/tests/unit/helpers/atanh-test', ['dummy/helpers/atanh', 'qunit'], function (_atanh, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | atanh');\n\n  (0, _qunit.test)('atanh works', function (assert) {\n    var result = (0, _atanh.atanh)([0]);\n    assert.equal(result, 0);\n  });\n});","define('dummy/tests/unit/helpers/cbrt-test', ['dummy/helpers/cbrt', 'qunit'], function (_cbrt, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | cbrt');\n\n  (0, _qunit.test)('cbrt works', function (assert) {\n    var result = (0, _cbrt.cbrt)([27]);\n    assert.equal(result, 3);\n  });\n});","define('dummy/tests/unit/helpers/ceil-test', ['dummy/helpers/ceil', 'qunit'], function (_ceil, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | ceil');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _ceil.ceil)([1]);\n    assert.equal(result, 1);\n\n    result = (0, _ceil.ceil)([1.01]);\n    assert.equal(result, 2);\n\n    result = (0, _ceil.ceil)([1.5]);\n    assert.equal(result, 2);\n\n    result = (0, _ceil.ceil)([1.99]);\n    assert.equal(result, 2);\n\n    result = (0, _ceil.ceil)([2]);\n    assert.equal(result, 2);\n  });\n});","define('dummy/tests/unit/helpers/clz32-test', ['dummy/helpers/clz32', 'qunit'], function (_clz, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | clz32');\n\n  (0, _qunit.test)('clz32 works', function (assert) {\n    var result = (0, _clz.clz32)([1000]);\n    assert.equal(result, 22);\n  });\n});","define('dummy/tests/unit/helpers/cos-test', ['dummy/helpers/cos', 'qunit'], function (_cos, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | cos');\n\n  (0, _qunit.test)('cos works', function (assert) {\n    var result = (0, _cos.cos)([0]);\n    assert.equal(result, 1);\n  });\n});","define('dummy/tests/unit/helpers/cosh-test', ['dummy/helpers/cosh', 'qunit'], function (_cosh, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | cosh');\n\n  (0, _qunit.test)('cosh works', function (assert) {\n    var result = (0, _cosh.cosh)([0]);\n    assert.equal(result, 1);\n  });\n});","define('dummy/tests/unit/helpers/div-test', ['dummy/helpers/div', 'qunit'], function (_div, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | div');\n\n  (0, _qunit.test)('division works', function (assert) {\n    var result = (0, _div.div)([20, 10]);\n    assert.equal(result, 2);\n  });\n\n  (0, _qunit.test)('division of multiple arguments works works', function (assert) {\n    var result = (0, _div.div)([96, 2, 3, 2, 2, 2, 2]);\n    assert.equal(result, 1);\n  });\n});","define('dummy/tests/unit/helpers/exp-test', ['dummy/helpers/exp', 'qunit'], function (_exp, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | exp');\n\n  (0, _qunit.test)('exp works', function (assert) {\n    var result = (0, _exp.exp)([1]);\n    assert.equal(result.toFixed(3), 2.718);\n  });\n});","define('dummy/tests/unit/helpers/expm1-test', ['dummy/helpers/expm1', 'qunit'], function (_expm, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | expm1');\n\n  (0, _qunit.test)('expm1 works', function (assert) {\n    var result = (0, _expm.expm1)([1]);\n    assert.equal(result.toFixed(3), 1.718);\n  });\n});","define('dummy/tests/unit/helpers/floor-test', ['dummy/helpers/floor', 'qunit'], function (_floor, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | floor');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _floor.floor)([1]);\n    assert.equal(result, 1);\n\n    result = (0, _floor.floor)([1.01]);\n    assert.equal(result, 1);\n\n    result = (0, _floor.floor)([1.5]);\n    assert.equal(result, 1);\n\n    result = (0, _floor.floor)([1.99]);\n    assert.equal(result, 1);\n\n    result = (0, _floor.floor)([2]);\n    assert.equal(result, 2);\n  });\n});","define('dummy/tests/unit/helpers/fround-test', ['dummy/helpers/fround', 'qunit'], function (_fround, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | fround');\n\n  (0, _qunit.test)('fround works', function (assert) {\n    var result = (0, _fround.fround)([1.337]);\n    assert.equal(result, 1.3370000123977661);\n  });\n});","define('dummy/tests/unit/helpers/hypot-test', ['dummy/helpers/hypot', 'qunit'], function (_hypot, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | hypot');\n\n  (0, _qunit.test)('hypot works', function (assert) {\n    var result = (0, _hypot.hypot)([3, 4, 5]);\n    assert.equal(result, 7.0710678118654755);\n  });\n});","define('dummy/tests/unit/helpers/imul-test', ['dummy/helpers/imul', 'qunit'], function (_imul, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | imul');\n\n  (0, _qunit.test)('imul works', function (assert) {\n    var result = (0, _imul.imul)([0xfffffffe, 5]);\n    assert.equal(result, -10);\n  });\n});","define('dummy/tests/unit/helpers/log-e-test', ['dummy/helpers/log-e', 'qunit'], function (_logE, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | logE');\n\n  (0, _qunit.test)('logE works', function (assert) {\n    var result = (0, _logE.logE)([0.5]);\n    assert.equal(result.toFixed(3), -0.693);\n  });\n});","define('dummy/tests/unit/helpers/log10-test', ['dummy/helpers/log10', 'qunit'], function (_log, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | log10');\n\n  (0, _qunit.test)('log10 works', function (assert) {\n    var result = (0, _log.log10)([2]);\n    assert.equal(result.toFixed(3), 0.301);\n  });\n});","define('dummy/tests/unit/helpers/log1p-test', ['dummy/helpers/log1p', 'qunit'], function (_log1p, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | log1p');\n\n  (0, _qunit.test)('log1p works', function (assert) {\n    var result = (0, _log1p.log1p)([0.5]);\n    assert.equal(result.toFixed(3), 0.405);\n  });\n});","define('dummy/tests/unit/helpers/log2-test', ['dummy/helpers/log2', 'qunit'], function (_log, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | log2');\n\n  (0, _qunit.test)('log2 works', function (assert) {\n    var result = (0, _log.log2)([2]);\n    assert.equal(result, 1);\n  });\n});","define('dummy/tests/unit/helpers/max-test', ['dummy/helpers/max', 'qunit'], function (_max, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | max');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('max works', function (assert) {\n    assert.equal((0, _max.max)([1, 2, 3, 5, 6, 42, 3, 6, 7]), 42, 'accepts multiple arguments');\n\n    assert.equal((0, _max.max)([42]), 42, 'accepts one argument');\n\n    assert.equal((0, _max.max)([]), Number.NEGATIVE_INFINITY, 'accepts zero arguments');\n\n    assert.equal((0, _max.max)({}), Number.NEGATIVE_INFINITY, 'accepts an object');\n  });\n});","define('dummy/tests/unit/helpers/min-test', ['dummy/helpers/min', 'qunit'], function (_min, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | min');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    assert.equal((0, _min.min)([3, 2, 3, 5, 6, 42, 3, 6, 7]), 2, 'accepts multiple arguments');\n\n    assert.equal((0, _min.min)([42]), 42, 'accepts one argument');\n\n    assert.equal((0, _min.min)([]), Infinity, 'accepts zero arguments');\n\n    assert.equal((0, _min.min)({}), Infinity, 'accepts an object');\n  });\n});","define('dummy/tests/unit/helpers/mod-test', ['dummy/helpers/mod', 'qunit'], function (_mod, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | mod');\n\n  (0, _qunit.test)('modulus works', function (assert) {\n    var result = (0, _mod.mod)([20, 10]);\n    assert.equal(result, 0);\n  });\n\n  (0, _qunit.test)('modulus of multiple arguments works', function (assert) {\n    var result = (0, _mod.mod)([10, 7, 2]);\n    assert.equal(result, 1);\n  });\n});","define('dummy/tests/unit/helpers/mult-test', ['dummy/helpers/mult', 'qunit'], function (_mult, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | mult');\n\n  (0, _qunit.test)('multiplication works', function (assert) {\n    var result = (0, _mult.mult)([20, 10]);\n    assert.equal(result, 200);\n  });\n\n  (0, _qunit.test)('multiplication of multiple arguments works', function (assert) {\n    var result = (0, _mult.mult)([2, 2, 2, 2, 2, 3]);\n    assert.equal(result, 96);\n  });\n});","define('dummy/tests/unit/helpers/pow-test', ['dummy/helpers/pow', 'qunit'], function (_pow, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | pow');\n\n  (0, _qunit.test)('pow works', function (assert) {\n    var result = (0, _pow.pow)([7, 2]);\n    assert.equal(result, 49);\n  });\n\n  (0, _qunit.test)('negative base works', function (assert) {\n    var result = (0, _pow.pow)([-7, 2]);\n    assert.equal(result, 49);\n  });\n\n  (0, _qunit.test)('negative exponent works', function (assert) {\n    var result = (0, _pow.pow)([2, -2]);\n    assert.equal(result, 0.25);\n  });\n});","define('dummy/tests/unit/helpers/random-test', ['dummy/helpers/random', 'dummy/tests/helpers/range', 'qunit'], function (_random, _range, _qunit) {\n  'use strict';\n\n  var floor = Math.floor;\n\n  var SAMPLE_SIZE = 100;\n  var PRECISION = 6;\n\n  // 💡 Because precise decimals aren't zero-padded, we can\n  // tolerate some percentage of failures when dealing with decimal length\n  var TOLERANCE = 0.25; // 75% pass-rate\n\n  var randVal = void 0,\n      satisfied = void 0,\n      passCount = void 0,\n      message = void 0;\n\n  (0, _qunit.module)('Unit | Helper | random');\n\n  function isPassing(passCount, sampleSize, toleranceRatio) {\n    return passCount >= floor(sampleSize * (1 - toleranceRatio));\n  }\n\n  function numDecimals(floatingPointNum) {\n    return floatingPointNum.toPrecision().split('.')[1].length;\n  }\n\n  (0, _qunit.test)('no positional arguments', function (assert) {\n    message = 'defaults to returning the whole numbers of either 0 or 1';\n\n    passCount = (0, _range.default)(1, SAMPLE_SIZE).reduce(function (acc) {\n      randVal = (0, _random.random)();\n      satisfied = randVal === 0 || randVal === 1;\n\n      return satisfied ? acc + 1 : acc;\n    }, 0);\n\n    assert.ok(isPassing(passCount, SAMPLE_SIZE, TOLERANCE), message);\n\n    message = 'returns a number between 0 and 1, with decimal precision specified by `decimals`';\n\n    passCount = (0, _range.default)(1, SAMPLE_SIZE).reduce(function (acc) {\n      randVal = (0, _random.random)({ decimals: PRECISION });\n\n      satisfied = randVal > 0 && randVal < 1 && numDecimals(randVal) <= PRECISION;\n\n      return satisfied ? acc + 1 : acc;\n    }, 0);\n\n    assert.ok(isPassing(passCount, SAMPLE_SIZE, TOLERANCE), message);\n  });\n\n  (0, _qunit.test)('one positional argument', function (assert) {\n    message = 'returns a random whole number between 0 and 42, inclusive';\n\n    passCount = (0, _range.default)(1, SAMPLE_SIZE).reduce(function (acc) {\n      randVal = (0, _random.random)([42]);\n\n      satisfied = randVal >= 0 && randVal <= 42;\n\n      return satisfied ? acc + 1 : acc;\n    }, 0);\n\n    assert.ok(isPassing(passCount, SAMPLE_SIZE, TOLERANCE), message);\n\n    message = 'returns a random number between 0 and a single positional arg, with decimal precision specified by `decimals`';\n    passCount = (0, _range.default)(1, SAMPLE_SIZE).reduce(function (acc) {\n      randVal = (0, _random.random)([42], { decimals: PRECISION });\n\n      satisfied = randVal > 0 && randVal < 42 && numDecimals(randVal) <= PRECISION;\n\n      return satisfied ? acc + 1 : acc;\n    }, 0);\n\n    assert.ok(isPassing(passCount, SAMPLE_SIZE, TOLERANCE), message);\n  });\n\n  (0, _qunit.test)('two positional arguments', function (assert) {\n    message = 'returns a random whole number between two upper and lower bound postional args, inclusive';\n    passCount = (0, _range.default)(1, SAMPLE_SIZE).reduce(function (acc) {\n      randVal = (0, _random.random)([1797, 21]);\n\n      satisfied = randVal >= 21 && randVal <= 1797;\n\n      return satisfied ? acc + 1 : acc;\n    }, 0);\n\n    assert.ok(isPassing(passCount, SAMPLE_SIZE, TOLERANCE), message);\n\n    message = 'returns a random number between two upper and lower bound postional args, with decimal precision specified by `decimals`';\n    passCount = (0, _range.default)(1, SAMPLE_SIZE).reduce(function (acc) {\n      randVal = (0, _random.random)([21, 1797], { decimals: PRECISION });\n\n      satisfied = randVal >= 21 && randVal <= 1797 && numDecimals(randVal) <= PRECISION;\n\n      return satisfied ? acc + 1 : acc;\n    }, 0);\n\n    assert.ok(isPassing(passCount, SAMPLE_SIZE, TOLERANCE), message);\n  });\n\n  (0, _qunit.test)('bounding `decimals` between 0 and 20', function (assert) {\n    randVal = (0, _random.random)([42], { decimals: 100 });\n\n    satisfied = randVal > 0 && randVal < 42 && numDecimals(randVal) <= 20;\n\n    assert.ok(satisfied);\n  });\n});","define('dummy/tests/unit/helpers/round-test', ['dummy/helpers/round', 'qunit'], function (_round, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | round');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n\n    assert.equal((0, _round.round)([20.49]), 20, 'It rounds values with a decimal place less than .5 down');\n\n    assert.equal((0, _round.round)([20.5]), 21, 'It rounds values with a decimal place greater than or equal to .5 up');\n\n    assert.equal((0, _round.round)([-20.5]), -20, 'It rounds negative numbers up appropriately');\n\n    assert.equal((0, _round.round)([-20.51]), -21, 'It rounds negative numbers down appropriately');\n\n    assert.equal((0, _round.round)([42]), 42, 'When given a whole number, the result stays the same');\n  });\n});","define('dummy/tests/unit/helpers/sign-test', ['dummy/helpers/sign', 'qunit'], function (_sign, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | sign');\n\n  (0, _qunit.test)('it works', function (assert) {\n\n    assert.equal((0, _sign.sign)([-5]), -1, 'Negative returns -1');\n\n    assert.equal((0, _sign.sign)([5]), 1, 'Positive returns 1');\n\n    assert.equal(String((0, _sign.sign)(['foo'])), 'NaN', 'Invalid returns NaN');\n  });\n});","define('dummy/tests/unit/helpers/sin-test', ['dummy/helpers/sin', 'qunit'], function (_sin, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | sin');\n\n  (0, _qunit.test)('sin works', function (assert) {\n    var result = (0, _sin.sin)([0]);\n    assert.equal(result, 0);\n  });\n});","define('dummy/tests/unit/helpers/sqrt-test', ['dummy/helpers/sqrt', 'qunit'], function (_sqrt, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | sqrt');\n\n  (0, _qunit.test)('square root works', function (assert) {\n    var result = (0, _sqrt.sqrt)([25]);\n    assert.equal(result, 5);\n  });\n\n  (0, _qunit.test)('negative square root is NaN', function (assert) {\n    var result = (0, _sqrt.sqrt)([-10]);\n    assert.ok(isNaN(result));\n  });\n});","define('dummy/tests/unit/helpers/sub-test', ['dummy/helpers/sub', 'qunit'], function (_sub, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | sub');\n\n  (0, _qunit.test)('subtraction works', function (assert) {\n    var result = (0, _sub.sub)([20, 10]);\n    assert.equal(result, 10);\n  });\n\n  (0, _qunit.test)('subtraction of multiple arguments works', function (assert) {\n    var result = (0, _sub.sub)([5, 4, 2, -9]);\n    assert.equal(result, 8);\n  });\n});","define('dummy/tests/unit/helpers/tan-test', ['dummy/helpers/tan', 'qunit'], function (_tan, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | tan');\n\n  (0, _qunit.test)('tan works', function (assert) {\n    var result = (0, _tan.tan)([1]);\n    assert.equal(result.toFixed(3), 1.557);\n  });\n});","define('dummy/tests/unit/helpers/tanh-test', ['dummy/helpers/tanh', 'qunit'], function (_tanh, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | tanh');\n\n  (0, _qunit.test)('tanh works', function (assert) {\n    var result = (0, _tanh.tanh)([1]);\n    assert.equal(result.toFixed(3), 0.762);\n  });\n});","define('dummy/tests/unit/helpers/trunc-test', ['dummy/helpers/trunc', 'qunit'], function (_trunc, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | trunc');\n\n  (0, _qunit.test)('trunc works', function (assert) {\n    var result = void 0;\n    result = (0, _trunc.trunc)([13.37]);\n    assert.equal(result, 13);\n    result = (0, _trunc.trunc)([0.123]);\n    assert.equal(result, 0);\n    result = (0, _trunc.trunc)([-1.123]);\n    assert.equal(result, -1);\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;","file":"tests.js"}